{"version":3,"file":"src_app_tabs_course_course_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEZ;AAE3C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oDAAU;KACtB;CACF,CAAC;IAMW,uBAAuB,SAAvB,uBAAuB;CAAG;AAA1B,uBAAuB;IAJnC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBK;AACM;AACF;AAEA;AAEqB;AAEvB;IAW9B,gBAAgB,SAAhB,gBAAgB;CAAG;AAAnB,gBAAgB;IAT5B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,2EAAuB;SACxB;QACD,YAAY,EAAE,CAAC,oDAAU,CAAC;KAC3B,CAAC;GACW,gBAAgB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACnBqB;AACH;AAEW;IAO7C,UAAU,SAAV,UAAU;IAKrB,YAAmB,KAAoB,EAAS,GAAe;QAA5C,UAAK,GAAL,KAAK,CAAe;QAAS,QAAG,GAAH,GAAG,CAAY;IAAI,CAAC;IAE9D,QAAQ;;YACZ,uFAAuF;YACvF,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;YAEtB,IAAI,QAAgB,CAAC;YAErB,kCAAkC;YAClC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBACxC,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;YAChC,CAAC,CAAC;YAEF,oCAAoC;YACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAEjC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAElD,mDAAmD;YACnD,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAErF,gDAAgD;YAChD,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,EAAC;gBAC5B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBAEtB,sEAAsE;gBACtE,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtG;iBACI;gBACH,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACxB;QACH,CAAC;KAAA;CAEF;;YA/CO,2DAAc;YAEd,iEAAU;;AAOL,UAAU;IALtB,wDAAS,CAAC;QACT,QAAQ,EAAE,YAAY;QACtB,mEAAiC;;KAElC,CAAC;GACW,UAAU,CAsCtB;AAtCsB","sources":["./src/app/tabs/course/course-routing.module.ts","./src/app/tabs/course/course.module.ts","./src/app/tabs/course/course.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CoursePage } from './course.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CoursePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CoursePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CoursePageRoutingModule } from './course-routing.module';\n\nimport { CoursePage } from './course.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CoursePageRoutingModule\n  ],\n  declarations: [CoursePage]\n})\nexport class CoursePageModule {}\n","import { Component, OnInit } from '@angular/core';\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Race} from \"../../api/data/Race\";\r\nimport {ApiService} from \"../../api/services/api.service\";\r\n\r\n@Component({\r\n  selector: 'app-course',\r\n  templateUrl: './course.page.html',\r\n  styleUrls: ['./course.page.scss'],\r\n})\r\nexport class CoursePage implements OnInit {\r\n  race: Race;\r\n  isResumed: boolean;   //permet d'afficher le classement de la course ou l'horaire si elle ne s'est pas encore déroulée\r\n\r\n\r\n  constructor(public route:ActivatedRoute, public api: ApiService) { }\r\n\r\n  async ngOnInit() {\r\n    //efface les données d'une ancienne course pour ne pas être affichée lors du chargement\r\n    this.race = undefined;\r\n\r\n    let jsonData: string;\r\n\r\n    //récupérer la course sélectionnée\r\n    this.route.queryParams.subscribe(params => {\r\n      jsonData = params['raceData'];\r\n    })\r\n\r\n    //désérialiser les donnée JSON reçue\r\n    this.race = JSON.parse(jsonData);\r\n\r\n    this.race.dateTime = new Date(this.race.dateTime);\r\n\r\n    //requête pour récupérer les résultats de la course\r\n    this.race.Results = await this.api.getRaceResults(this.race.season, this.race.round);\r\n\r\n    //check si les données son disponible dans l'api\r\n    if (this.race.Results != null){\r\n      this.isResumed = true;\r\n\r\n      //requête pour récupérer les résultats des qualifications d'une course\r\n      this.race.QualifyingResults = await this.api.getQualifyingResults(this.race.season, this.race.round);\r\n    }\r\n    else {\r\n      this.isResumed = false;\r\n    }\r\n  }\r\n\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}